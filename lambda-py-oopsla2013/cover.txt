We thank the reviewers for their comments.

Reviewer 1
----------

Response:

We would indeed have loved to build tools atop \Py, but that goes well
beyond the scope of one paper. Given the relatively small number of
papers on tools for Python, odds are each tool would be a paper in its
own right. Our goal was to lay the foundation for such future work.

We have drawn heavily on our extensive experience with semantics and
tooling for JavaScript (and indeed for several other languages and
systems) to design a semantics that is very similar to that used in
thousands of other papers. We have thus reduced Python to something
wholly familiar to the broader PL community.

Revision:

Thanks for pointing out that we say too late in section 4 that the
initial CPS translation is a failed effort. We have made that clear up
front, in prose and the section title.

Reviewer 2
----------

Response:

It is indeed true that one *could* directly express the scope rules in
the core language. We believe that would have made the core not only
bigger, but also far less amenable to many kinds of analysis. This is
because the resulting \Py would be much closer to a dynamically-scoped
language than one with mostly static scope. This has echoes of similar
problems with JavaScript.

Nevertheless, these are matters of judgment---we did not claim this is
a *canonical* core language for Python---and another group is welcome
to try doing things differently (we make our entire codebase public to
ease experimentation). Indeed, instead of starting from scratch, they
can start with our system, change just that one part, use the testing
strategy to ensure they have not altered the meaning of programs, and
obtain a different semantics. Clients would then be free to choose
between the multiple systems.

Reviewer 3
----------

Response:

``the paper does not show that the generators can't be desugared to
Python''---that is correct. We should not have made such a remark
without proof, which we do not have. Thanks for pointing that out.

On locals:

We do not need to give up all hope. If a program only wants to read
and reflect on its locals, that can be just fine. Even modifying a
local is sometimes no different from a variable update in the
source. If, however, a programmer performs arbitrary mutations on
locals, then all bets will indeed be off. Note, however, that updating
locals is not supported by the specification:

  http://docs.python.org/3.2/library/functions.html#locals 
  Note: The contents of this dictionary should not be modified;
  changes may not affect the values of local and free variables used
  by the interpreter.

It also helps to consider the purpose of a semantics. If we are trying
to build a (purely) static reasoning system, such a system is unlikely
to be sound if the program modifies locals or uses it in a
higher-order way. Therefore, such a system is likely to greatly
restrict the use of locals anyway, so a semantics that doesn't handle
the full power of locals is actually perfectly useful. Indeed, our
semantics provides some useful insight into what features a subset of
Python should avoid to be amenable to static reasoning.

As a rough point of comparison, it takes about 20 hours to run a
similar experimental semantics for JavaScript (Politz, et al., Dynamic
Languages Symposium 2012) on a conformance suite that takes around
10-15 minutes in a browser.

Revision:

We have revised the text to make clear at the beginning of section 4
that this is describing a failed attempt, and changed the prose to
avoid the claim about the absence of a desugaring.

We have added some of the above discussion about locals in section 6.

The End (and do always look on the bright side of life)
